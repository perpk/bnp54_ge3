expressions.3compontent.umap <- umap(clean.expression.data.df, n_components=3)
View(expressions.3compontent.umap)
expressions.3component.umap <- umap(clean.expression.data.df, n_components=3)
layout3d <- as.data.frame(expressions.3component.umap[["layou"]])
umap.plot.3d.df <- data.frame(x = layout[,1], y = layout[,2], z = layout[,3], Status = expression.tag.df)
layout3d <- as.data.frame(expressions.3component.umap[["layout"]])
umap.plot.3d.df <- data.frame(x = layout[,1], y = layout[,2], z = layout[,3], Status = expression.tag.df)
View(layout3d)
umap.plot.3d.df <- data.frame(x = layout3d[,1], y = layout3d[,2], z = layout3d[,3], Status = expression.tag.df)
scatterplot3d(umap.plot.3d.df)
library("plotly")
install.packages("plotly")
library("plotly")
plot_ly(umap.plot.3d.df, color = umap.plot.3d.df$Status)
View(umap.plot.3d.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
plot_ly(umap.plot.3d.df, x = ~z, y = ~y, z = ~x, color = umap.plot.3d.df$Status)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
umap.plot.3d.df <- data.frame(x = layout3d[,3], y = layout3d[,2], z = layout3d[,1], Status = expression.tag.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
View(clean.expression.data)
View(clean.expression.data.df)
tagged.expressions <- data.frame(clean.expression.data, expression.tag.df$Status);
View(tagged.expressions)
tagged.expressions <- data.frame(clean.expression.data, Status = expression.tag.df$Status);
aov(tagged.expressions, c("control", "disease"))
aov(tagged.expressions ~ c("control", "disease"))
tagged.expressions <- data.frame(clean.expression.data, Status = expression.tag.df$Status);
aov(tagged.expressions ~ c("control", "disease"))
control.expressions <- tagged.expressions[tagged.expressions[,2501] == "control", -2501]
control.expressions <- tagged.expressions[tagged.expressions$Status == "control", -2501]
disease.expressions <- tagged.expressions[tagged.expressions$Status == "disease", -2501]
View(disease.expressions)
control.expressions <- tagged.expressions[tagged.expressions$Status == "control", -"Status"]
disease.expressions <- tagged.expressions[tagged.expressions$Status == "disease", -"Status"]
control.expressions <- tagged.expressions[tagged.expressions$Status == "control", -tagged.expressions$Status]
control.expressions <- tagged.expressions[tagged.expressions$Status == "control", -2491]
disease.expressions <- tagged.expressions[tagged.expressions$Status == "disease", -2491]
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov(control ~ disease)
}
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_values <- c(aov_values, aov(control ~ disease))
}
aov_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_values <- c(aov_values, aov(control ~ disease))
}
View(aov_values)
p_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_values <- aov(control ~ disease)
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_results <- aov(control ~ disease)
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
p_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_results <- aov(control ~ disease)
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
p_values
p_values[i < 0.05]
class(p_values)
p_values[p_values < 0.05]
count(p_values[p_values < 0.05])
sum(p_values < 0.05)
p_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_results <- aov(control ~ disease)
aov_results <- aov(clean.expression.data ~ expression.tag.df)
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
aov_results <- aov(clean.expression.data ~ expression.tag.df[,1])
p_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_results <- aov(control ~ disease)
aov_results <- aov(clean.expression.data ~ expression.tag.df[,1])
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
install.packages("umap")
install.packages("umap")
library("dplyr")
library("ggplot2")
# 1. Read data into dataframes
expression.data.df <- as.data.frame(read.csv("expression_data.csv"))
expression.tag.df <- as.data.frame(read.csv("expression_data_tag.csv"))
temp <- expression.data.df[,-1]
rownames(temp) <- expression.data.df[,1]
expression.data.df <- as.data.frame(temp)
expression.data.df <- t(expression.data.df)
temp <- as.data.frame(expression.tag.df[,-1])
rownames(temp) <- expression.tag.df[,1]
expression.tag.df <- as.data.frame(temp)
colnames(expression.tag.df) <- c('Status')
# 2. Extract and delete all NA values from the imported dataset
na.genes <- apply(expression.data.df, 2, function(c) any(is.na(c)))
clean.expression.data <- expression.data.df[, !na.genes]
na.gene.list <- colnames(expression.data.df[, na.genes])
print(na.gene.list)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data.df)
library("umap")
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data.df)
# 2. Extract and delete all NA values from the imported dataset
na.genes <- apply(expression.data.df, 2, function(c) any(is.na(c)))
clean.expression.data <- expression.data.df[, !na.genes]
na.gene.list <- colnames(expression.data.df[, na.genes])
print(na.gene.list)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data.df)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data)
layout <- as.data.frame(expressions.umap[["layout"]])
umap.plot.df <- data.frame(x = layout[,1], y = layout[,2],
Status = expression.tag.df)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
install.packages("plotly")
library("plotly")
expressions.3component.umap <- umap(clean.expression.data.df, n_components=3)
layout3d <- as.data.frame(expressions.3component.umap[["layout"]])
umap.plot.3d.df <- data.frame(x = layout3d[,3], y = layout3d[,2], z = layout3d[,1], Status = expression.tag.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
# 4. Feature Selection via ANOVA
library("stats")
tagged.expressions <- data.frame(clean.expression.data, Status = expression.tag.df$Status);
control.expressions <- tagged.expressions[tagged.expressions$Status == "control", -2491]
disease.expressions <- tagged.expressions[tagged.expressions$Status == "disease", -2491]
p_values <- c()
for (g in 1:2490) {
control <- control.expressions[,g]
disease <- disease.expressions[,g]
aov_results <- aov(control ~ disease)
aov_results <- aov(clean.expression.data ~ expression.tag.df[,1])
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
aov_results <- aov(clean.expression.data ~ expression.tag.df[,1])
p_values <- c()
for (g in 1:2490) {
aov_results <- aov(clean.expression.data ~ expression.tag.df[,1])
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
tagged.expressions <- data.frame(clean.expression.data, Status = expression.tag.df$Status);
p_values <- c()
for (g in 1:2490) {
aov_results <- aov(clean.expression.data[,g] ~ expression.tag.df[,1])
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
sum(p_values < 0.05)
df.pvalues <- as.data.frame(p_values)
View(df.pvalues)
genes <- colnames(clean.expression.data)
colnames(df.pvalues) <- genes
rownames(df.pvalues) <- genes
stat.expression.data <- data.frame(t(clean.expression.data), df.pvalues, stringsAsFactors = FALSE)
View(stat.expression.data)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
View(filtered.expression.data)
rownames(filtered.expression.data)
filtered.genes <- rownames(filtered.expression.data)
pase(shQuote(filtered.genes, type="cmd"), collapse = ", ")
paste(shQuote(filtered.genes, type="cmd"), collapse = ", ")
cat(paste(shQuote(filtered.genes, type="cmd"), collapse = ", "))
length(filtered.genes)
filtered.expressions.umap <- umap(filtered.expression.data)
# umap.plot.df <- data.frame(x = layout[,1], y = layout[,2], Status = expression.tag.df)
# ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
library("umap")
filtered.expressions.umap <- umap(filtered.expression.data)
layout.filtered <- as.data.frame(filtered.expressions.umap[["layout"]])
umap.filtered.plot.df <- data.frame(x = layout[,1], y = layout[,2], Status = expression.tag.df)
umap.filtered.plot.df <- data.frame(x = layout[,1], y = layout[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + gem_point()
library("ggplot2")
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + gem_point()
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status))
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
expression.tag.df
filtered.expression.data
View(filtered.expressions.umap)
View(filtered.expression.data)
filtered.expression.data <- t(filtered.expression.data)
filtered.expression.data <- t(filtered.expression.data)
filtered.expression.data <- t(filtered.expression.data[,-601])
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data[,-601]
filtered.expression.data <- t(filtered.expression.data[,-601])
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- t(as.data.frame(filtered.expression.data[,-601]))
filtered.expression.data <- t(filtered.expression.data[,1:600])
filtered.expression.data[,1:600]
filtered.expression.data[,1]
View(disease.expressions)
View(filtered.expression.data)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data[,1:600]
filtered.expression.data <- t(filtered.expression.data[,1:600])
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- t(as.data.frame(filtered.expression.data[,1:600]))
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- filtered.expression.data[,1:600]
filtered.expression.data <- t(filtered.expression.data)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- filtered.expression.data[,1:600]
class(filtered.expression.data)
t(filtered.expression.data)
filtered.expression.data.t <- t(filtered.expression.data)
View(filtered.expression.data)
View(filtered.expression.data.t)
expression.tag.df
filteted.samples <- rownames(filtered.expression.data)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- filtered.expression.data[,1:600]
filteted.samples <- rownames(filtered.expression.data)
stat.expression.data <- data.frame(t(clean.expression.data), df.pvalues, stringsAsFactors = FALSE)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- filtered.expression.data[,1:600]
filteted.samples <- rownames(filtered.expression.data)
filteted.samples <- rownames(filtered.expression.data)
filteted.samples <- rownames(filtered.expression.data.t)
expression.tag.df
expression.tag.df[,filtered.samples]
filtered.samples <- rownames(filtered.expression.data.t)
expression.tag.df[,filtered.samples]
View(expression.tag.df)
filtered.expression.data.t <- t(filtered.expression.data)
filtered.expressions.umap <- umap(filtered.expression.data.t)
layout.filtered <- as.data.frame(filtered.expressions.umap[["layout"]])
expression.tag.df
umap.filtered.plot.df <- data.frame(x = layout[,1], y = layout[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
filtered.expressions.umap <- umap(filtered.expression.data.t)
layout.filtered <- as.data.frame(filtered.expressions.umap[["layout"]])
umap.filtered.plot.df <- data.frame(x = layout[,1], y = layout[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
umap.filtered.plot.df <- data.frame(x = layout.filtered[,1], y = layout.filtered[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
umap.filtered.plot.df <- data.frame(x = layout.filtered[,1], y = layout.filtered[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
ggplot(umap.filtered.plot.df.t, aes(x, y, colour = Status)) + geom_point()
filtered.expression.data <- filtered.expression.data[,1:600]
stat.expression.data <- data.frame(t(clean.expression.data), df.pvalues, stringsAsFactors = FALSE)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.expression.data <- filtered.expression.data[,1:600]
filtered.expression.data.t <- t(filtered.expression.data)
filtered.expressions.umap <- umap(filtered.expression.data.t)
layout.filtered <- as.data.frame(filtered.expressions.umap[["layout"]])
umap.filtered.plot.df <- data.frame(x = layout.filtered[,1], y = layout.filtered[,2], Status = expression.tag.df)
ggplot(umap.filtered.plot.df, aes(x, y, colour = Status)) + geom_point()
install.packages("umap")
library("umap")
library("dplyr")
library("ggplot2")
# 1. Read data into dataframes
expression.data.df <- as.data.frame(read.csv("expression_data.csv"))
expression.tag.df <- as.data.frame(read.csv("expression_data_tag.csv"))
temp <- expression.data.df[,-1]
rownames(temp) <- expression.data.df[,1]
expression.data.df <- as.data.frame(temp)
expression.data.df <- t(expression.data.df)
temp <- as.data.frame(expression.tag.df[,-1])
rownames(temp) <- expression.tag.df[,1]
expression.tag.df <- as.data.frame(temp)
colnames(expression.tag.df) <- c('Status')
# 2. Extract and delete all NA values from the imported dataset
na.genes <- apply(expression.data.df, 2, function(c) any(is.na(c)))
clean.expression.data <- expression.data.df[, !na.genes]
na.gene.list <- colnames(expression.data.df[, na.genes])
print(na.gene.list)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data)
layout <- as.data.frame(expressions.umap[["layout"]])
umap.plot.df <- data.frame(x = layout[,1], y = layout[,2],
Status = expression.tag.df)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
install.packages("plotly")
library("plotly")
expressions.3component.umap <- umap(clean.expression.data.df, n_components=3)
library("umap")
expressions.3component.umap <- umap(clean.expression.data.df, n_components=3)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data)
layout <- as.data.frame(expressions.umap[["layout"]])
umap.plot.df <- data.frame(x = layout[,1], y = layout[,2],
Status = expression.tag.df)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
expressions.3component.umap <- umap(clean.expression.data.df, n_components=3)
expressions.3component.umap <- umap(clean.expression.data, n_components=3)
layout3d <- as.data.frame(expressions.3component.umap[["layout"]])
umap.plot.3d.df <- data.frame(x = layout3d[,3], y = layout3d[,2], z = layout3d[,1], Status = expression.tag.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
library("umap")
library("dplyr")
library("ggplot2")
library("stats")
# 1. Read data into dataframes
expression.data.df <- as.data.frame(read.csv("expression_data.csv"))
expression.tag.df <- as.data.frame(read.csv("expression_data_tag.csv"))
temp <- expression.data.df[,-1]
rownames(temp) <- expression.data.df[,1]
expression.data.df <- as.data.frame(temp)
expression.data.df <- t(expression.data.df)
temp <- as.data.frame(expression.tag.df[,-1])
rownames(temp) <- expression.tag.df[,1]
expression.tag.df <- as.data.frame(temp)
colnames(expression.tag.df) <- c('Status')
# 2. Extract and delete all NA values from the imported dataset
na.genes <- apply(expression.data.df, 2, function(c) any(is.na(c)))
clean.expression.data <- expression.data.df[, !na.genes]
na.gene.list <- colnames(expression.data.df[, na.genes])
print(na.gene.list)
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data)
layout <- as.data.frame(expressions.umap[["layout"]])
umap.plot.df <- data.frame(x = layout[,1], y = layout[,2],
Status = expression.tag.df)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
expressions.3component.umap <- umap(clean.expression.data, n_components=3)
layout3d <- as.data.frame(expressions.3component.umap[["layout"]])
umap.plot.3d.df <- data.frame(x = layout3d[,3], y = layout3d[,2], z = layout3d[,1], Status = expression.tag.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
umap.plot.3d.df <- data.frame(x = layout3d[,1], y = layout3d[,2], z = layout3d[,3], Status = expression.tag.df)
plot_ly(umap.plot.3d.df, x = ~x, y = ~y, z = ~z, color = umap.plot.3d.df$Status)
View(layout3d)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
# 3. Dimensionality Reduction via UMAP
expressions.umap <- umap(clean.expression.data)
layout <- as.data.frame(expressions.umap[["layout"]])
umap.plot.df <- data.frame(x = layout[,1], y = layout[,2],
Status = expression.tag.df)
ggplot(umap.plot.df, aes(x, y, colour = Status)) + geom_point()
# Topic 2.
# 1. Apply hierarchical clustering on dataset after feature selection
## Euclidean Distance & complete linkage
dist.expressions <- dist(filtered.expression.data.t, method = 'euclidean')
filtered.expression.data.t <- t(filtered.expression.data)
filtered.expression.data <- filtered.expression.data[,1:600]
stat.expression.data <- data.frame(t(clean.expression.data), df.pvalues, stringsAsFactors = FALSE)
# 4. Feature Selection via ANOVA
p_values <- c()
for (g in 1:2490) {
aov_results <- aov(clean.expression.data[,g] ~ expression.tag.df[,1])
p_values <- c(p_values, summary(aov_results)[[1]][["Pr(>F)"]][[1]])
}
df.pvalues <- as.data.frame(p_values)
genes <- colnames(clean.expression.data)
rownames(df.pvalues) <- genes
stat.expression.data <- data.frame(t(clean.expression.data), df.pvalues, stringsAsFactors = FALSE)
filtered.expression.data <- subset(stat.expression.data, stat.expression.data$p_values < 0.05)
filtered.genes <- rownames(filtered.expression.data)
length(filtered.genes)
cat(paste(shQuote(filtered.genes, type="cmd"), collapse = ", "))
filtered.expression.data <- filtered.expression.data[,1:600]
filtered.expression.data.t <- t(filtered.expression.data)
filtered.expressions.umap <- umap(filtered.expression.data.t)
layout.filtered <- as.data.frame(filtered.expressions.umap[["layout"]])
umap.filtered.plot.df <- data.frame(x = layout.filtered[,1], y = layout.filtered[,2], Status = expression.tag.df)
# Topic 2.
# 1. Apply hierarchical clustering on dataset after feature selection
## Euclidean Distance & complete linkage
dist.expressions <- dist(filtered.expression.data.t, method = 'euclidean')
dist.expressions
hclust(dist.expressions, method = "complete")
ggplot(hclust.expressions)
hclust.expressions <- hclust(dist.expressions, method = "complete")
ggplot(hclust.expressions)
plot(hclust.expressions)
# Topic 2.
# 1. Apply hierarchical clustering on dataset after feature selection
## Euclidean Distance & complete linkage
dist.expressions <- dist(filtered.expression.data, method = 'euclidean')
hclust.expressions <- hclust(dist.expressions, method = "complete")
plot(hclust.expressions)
# Topic 2.
# 1. Apply hierarchical clustering on dataset after feature selection
## Euclidean Distance & complete linkage
library("ggdendro")
install.packages("ggdendro")
# Topic 2.
# 1. Apply hierarchical clustering on dataset after feature selection
## Euclidean Distance & complete linkage
library("ggdendro")
p <- ggdendrogram(hclust.expressions, rotate = FALSE)
ggplotly(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
ggplotly(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 1)
ggplotly(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 0.2)
ggplotly(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 5)
ggplotly(p)
plot(hclust.expressions)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 5)
ggplotly(p)
plot(p)
plot(p, cex.lab=0.2)
plot(p)
plot(p, cex.axis=0.2)
plot(p, cex.axis=0.2)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
plot(p)
par(cex=0.3)
plot(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
par(cex=0.3)
plot(p)
p <- ggdendrogram(hclust.expressions, rotate = TRUE, size = 2)
par(cex=0.3)
plot(p)
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
plot(p)
#2. Hierarchical clustering and visualisation with complete, average and ward linkage
hclust.complete <- hclust(dist.expressions, method = "complete")
hclust.average <- hclust(dist.expressions, method = "average")
hclust.ward <- hclust(dist.expressions, method = "ward.D")
p.complete <- ggdendrogram(hclust.complete, rotate = FALSE)
p.average <- ggdendrogram(hclust.average, rotate = FALSE)
p.ward <- ggdendrogram(hclust.ward, rotate = FALSE)
plot(p.complete)
plot(p.average)
plot(p.ward)
plot(p.complete)
plot(p.ward)
#2. Hierarchical clustering and visualisation with complete, average and ward linkage
hclust.complete <- hclust(dist.expressions, method = "complete")
View(hclust.complete)
p.complete <- ggdendrogram(hclust.complete, rotate = FALSE)
View(p.complete)
#3.
cuttree(p.complete, 2)
#3.
library("stats")
cuttree(p.complete, 2)
cutree(p.complete, 2)
cutree(hclust.complete, 2)
cutree(hclust.expressions, 2)
plot(p.ward, hang=-1)
library("cluster")
plot(silhouette(cutree(hclust.expressions, 2), dist.expressions))
dist.expressions
plot(silhouette(cutree(hclust.expressions, 3), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 10), dist.expressions))
dist.expressions
as.data.frame(dist.expressions)
df <- as.data.frame(dist.expressions)
View(df)
dist.expressions[1]
hclust.expressions
cutree(hclust.expressions,3)
plot(silhouette(cutree(hclust.expressions, 4), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 5), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 6), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 7), dist.expressions))
hclust.expressions
hclust.expressions[[1]]
hclust.expressions[1
]
hclust.expressions[2]
hclust.expressions[2,]
hclust.expressions[3]
View(hclust.expressions)
dist.expressions <- dist(filtered.expression.data.t, method = 'euclidean')
hclust.expressions <- hclust(dist.expressions, method = "complete")
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
plot(p)
plot(silhouette(m, dist.expressions))
m <- cutree(hclust.expressions, 2)
plot(silhouette(m, dist.expressions))
plot(silhouette(cutree(hclust.expressions, 8), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 9), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 2), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 10), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 10), dist.expressions))
plot(silhouette(cutree(hclust.expressions, 2))
plot(silhouette(cutree(hclust.expressions, 2)
plot(silhouette(cutree(hclust.expressions, 2)))
plot(p, hang=-1)
dist.expressions <- dist(filtered.expression.data, method = 'euclidean')
hclust.expressions <- hclust(dist.expressions, method = "complete")
p <- ggdendrogram(hclust.expressions, rotate = FALSE, size = 2)
plot(p, hang=-1)
plot(p, hang=-10)
plot(p, hang=-1)
dist.expressions
dist.expressions[1]
dist.expressions[2]
dist.expressions[,]
dist.expressions[-1]
dist.expressions[-2]
